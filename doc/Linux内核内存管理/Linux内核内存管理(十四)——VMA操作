# Linux内核内存管理(十四)——`VMA`操作
- 在`32`位系统中，每个用户进程可以拥有`3GB`大小的虚拟地址空间，通常要远大于物理内存，那么如何管理这些虚拟地址空间呢？用户进程通常会多次调用`malloc()`或者使用`mmap()`接口映射文件到用户空间来进行读写等操作，这些操作都会要求在虚拟地址空间中分配内存块，这些内存块基本上都是离散的。`malloc()`是用户态常用的分配内存的接口`API`函数，`mmap()`是用户态常用的用于建立文件映射或匿名映射的函数，这两个函数我们在后续章节中都会详细介绍器内核实现机制。
- 进程地址空间在内核中使用`struct vm_area_struct`数据结构来描述，简称`VMA`，也被称为进程地址空间或进程线性区。由于这些地址空间归属于各个用户进程，所以在用户进程的`struct mm_struct`数据结构中也有相应的成员，用于对这些 `VMA` 进行管理。
- `VMA` 数据结构：`linux-4.14.130/include/linux/mm_types.h`

```c
struct vm_area_struct {
	/* The first cache line has the info for VMA tree walking. */

	unsigned long vm_start;		/* Our start address within vm_mm. */
	unsigned long vm_end;		/* The first byte after our end address within vm_mm. */

	/* linked list of VM areas per task, sorted by address */
	struct vm_area_struct *vm_next, *vm_prev; /* 进程的 VMA 都连接成一个链表 */

	struct rb_node vm_rb; /* VMA 作为一个节点加入红黑树中，每个进程的 struct mm_struct 数据结构中都有这样一颗红黑树 mm->mm_rb */

	/*
	 * Largest free memory gap in bytes to the left of this VMA.
	 * Either between this VMA and vma->vm_prev, or between one of the
	 * VMAs below us in the VMA rbtree and its ->vm_prev. This helps
	 * get_unmapped_area find a free area of the right size.
	 */
	unsigned long rb_subtree_gap;

	/* Second cache line starts here. */

	struct mm_struct *vm_mm;	/* The address space we belong to. 指向该 VMA 所属的进程struct mm_struct 数据结构 */
	pgprot_t vm_page_prot;		/* Access permissions of this VMA. VMA的访问权限*/
	unsigned long vm_flags;		/* Flags, see mm.h. 描述该VMA的一组标志位*/

	/*
	 * For areas with an address space and backing store,
	 * linkage into the address_space->i_mmap interval tree.
	 */
	struct {
		struct rb_node rb;
		unsigned long rb_subtree_last;
	} shared;

	/*
	 * A file's MAP_PRIVATE vma can be in both i_mmap tree and anon_vma
	 * list, after a COW of one of the file pages.	A MAP_SHARED vma
	 * can only be in the i_mmap tree.  An anonymous MAP_PRIVATE, stack
	 * or brk vma (with NULL file) can only be in an anon_vma list.
	 */
	struct list_head anon_vma_chain; /* Serialized by mmap_sem & page_table_lock */
	struct anon_vma *anon_vma;	/* Serialized by page_table_lock */ // anon_vma_chain、anon_vma 用于管理RMAP反向映射

	/* Function pointers to deal with this struct. */
	const struct vm_operations_struct *vm_ops; /* 指向许多方法的集合，这些方法用于在VMA中执行各种操作，通常用于文件映射 */

	/* Information about our backing store: */
	unsigned long vm_pgoff;		/* Offset (within vm_file) in PAGE_SIZE units 指定文件映射的偏移量，这个变量的单位不是Byte，而是页面的大小(PAGE_SIZE)。对于匿名页面来说，它的值可以是0或者 vm_addr/PAGE_SIZE */
	struct file * vm_file;		/* File we map to (can be NULL). 指向file的实例，描述一个被映射的文件。*/
	void * vm_private_data;		/* was vm_pte (shared mem) */

	atomic_long_t swap_readahead_info;
#ifndef CONFIG_MMU
	struct vm_region *vm_region;	/* NOMMU mapping region */
#endif
#ifdef CONFIG_NUMA
	struct mempolicy *vm_policy;	/* NUMA policy for the VMA */
#endif
	struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
} __randomize_layout;

```

- `struct mm_struct` 数据结构是描述进程内存管理的核心数据结构，该数据结构也提供了管理 `VMA` 所需要的信息，这些信息概况如下：`linux-4.14.130/include/linux/mm_types.h`

```c
struct mm_struct {
	struct vm_area_struct *mmap;		/* list of VMAs */
	struct rb_root mm_rb;
    ...
}

```

每个 `VMA` 都要连接到 `mm_struct` 中的链表和红黑树中，以方便查找：

1.  `mmap` 形成一个单链表，进程中所有的 `VMA` 都链接到这个链表中，链表头是 `mm_struct->mmap`。
2.  `mm_rb` 是红黑树的根节点，每个进程有一颗 `VMA` 的红黑树。

`VMA`按照起始地址以递增的方式插入 `mm_struct->mma` 链表中。当进程拥有大量的 `VMA` 时，扫描链表和查找特定的 `VMA` 是非常低效的操作，例如在云计算的机器中，所以内核中通常要靠红黑树来协助，以便提高查找速度。



## 1 查找`VMA`

- 通过虚拟地址`addr`来查找`VMA`是内核中常用的操作，内核提供一个`API` 函数来实现这个查找操作，`find_vma()`函数根据给定地址`addr` 查找满足如下条件之一的`VMA`，如下图所示：                                            ![1572412971964](/home/haibin.xu/haibin/doc/picture/图14.1-find_vma()示意图.png)

1.  `addr`在`VMA`空间范围内，即`vma->start <= addr <= vma->end`。
2.  距离`addr`最近并且`VMA`的结束地址大于`addr`的一个`VMA`。

- `find_vma()`函数实现如下：`linux-4.14.130/mm/mmap.c`

```c
/* Look up the first VMA which satisfies  addr < vm_end,  NULL if none. */
struct vm_area_struct *find_vma(struct mm_struct *mm, unsigned long addr)
{
	struct rb_node *rb_node;
	struct vm_area_struct *vma;

	/* Check the cache first. */
	vma = vmacache_find(mm, addr);
	if (likely(vma))
		return vma;

	rb_node = mm->mm_rb.rb_node;

	while (rb_node) {
		struct vm_area_struct *tmp;

		tmp = rb_entry(rb_node, struct vm_area_struct, vm_rb);

		if (tmp->vm_end > addr) {
			vma = tmp;
			if (tmp->vm_start <= addr)
				break;
			rb_node = rb_node->rb_left;
		} else
			rb_node = rb_node->rb_right;
	}

	if (vma)
		vmacache_update(addr, vma);
	return vma;
}

```

- `vmacache_find()`是内核中一个查找`VMA`的优化方法，在`task_struct`结构中，有一个存放最近访问过的`VMA`的数组`vmacache[VMACACHE_SIZE]`，其中可以存放4个最近使用的`VMA`，充分利用了局部性原理。如果在`vmacache`中没有找到`VMA`，那么遍历这个用户进程的`mm_rb`红黑树，这个红黑树存放着该用户进程所有的`VMA`。

- `while`循环要找一块满足上述要求的`VMA`。

- `find_vma_intersection()`函数是另外一个`API`接口，用于查找`start_addr、end_addr`和现存的`VMA`有重叠的一个`VMA`，它基于`find_vma()`函数来实现。函数路径：`linux-4.14.130/include/linux/mm.h`，实现如下：

```c
/* Look up the first VMA which intersects the interval start_addr..end_addr-1,
   NULL if none.  Assume start_addr < end_addr. */
static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * mm, unsigned long start_addr, unsigned long end_addr)
{
	struct vm_area_struct * vma = find_vma(mm,start_addr);

	if (vma && end_addr <= vma->vm_start)
		vma = NULL;
	return vma;
}

```

- `find_vma_prev()`函数的逻辑和`find_vma()`函数一样，但是返回`VMA`的前继成员`vma->vm_prev`，函数路径：`linux-4.14.130/mm/mmap.c`，实现如下：

```c
/*
 * Same as find_vma, but also return a pointer to the previous VMA in *pprev.
 */
struct vm_area_struct *
find_vma_prev(struct mm_struct *mm, unsigned long addr,
			struct vm_area_struct **pprev)
{
	struct vm_area_struct *vma;

	vma = find_vma(mm, addr);
	if (vma) {
		*pprev = vma->vm_prev;
	} else {
		struct rb_node *rb_node = mm->mm_rb.rb_node;
		*pprev = NULL;
		while (rb_node) {
			*pprev = rb_entry(rb_node, struct vm_area_struct, vm_rb);
			rb_node = rb_node->rb_right;
		}
	}
	return vma;
}

```



## 2 插入`VMA`

- `insert_vm_start()`是内核提供的插入`VMA`的核心`API`函数，函数路径：`linux-4.14.130/mm/mmap.c`，实现如下：

```c
/* Insert vm structure into process list sorted by address
 * and into the inode's i_mmap tree.  If vm_file is non-NULL
 * then i_mmap_rwsem is taken here.
 */
int insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)
{
	struct vm_area_struct *prev;
	struct rb_node **rb_link, *rb_parent;

	if (find_vma_links(mm, vma->vm_start, vma->vm_end,
			   &prev, &rb_link, &rb_parent))
		return -ENOMEM;
	if ((vma->vm_flags & VM_ACCOUNT) &&
	     security_vm_enough_memory_mm(mm, vma_pages(vma)))
		return -ENOMEM;

	/*
	 * The vm_pgoff of a purely anonymous vma should be irrelevant
	 * until its first write fault, when page's anon_vma and index
	 * are set.  But now set the vm_pgoff it will almost certainly
	 * end up with (unless mremap moves it elsewhere before that
	 * first wfault), so /proc/pid/maps tells a consistent story.
	 *
	 * By setting it to reflect the virtual start address of the
	 * vma, merges and splits can happen in a seamless way, just
	 * using the existing file pgoff checks and manipulations.
	 * Similarly in do_mmap_pgoff and in do_brk.
	 */
	if (vma_is_anonymous(vma)) {
		BUG_ON(vma->anon_vma);
		vma->vm_pgoff = vma->vm_start >> PAGE_SHIFT;
	}

	vma_link(mm, vma, prev, rb_link, rb_parent);
	return 0;
}

```

- `insert_vm_start()`函数向`VMA`链表和红黑树插入一个新的`VMA`。参数`mm`是进程的内存描述符，`vma`是要插入的线性区`VMA`。

- `find_vma_links()`查找要插入的位置。

- `vma_is_anonymous()`，如果`VMA`是匿名映射区，则设置`vma->vm_pgoff`等于区域起始页码。

- `vma_link()`函数将`vma`插入链表和红黑树中，若是文件映射，加入到文件的基数树中。

  

- `insert_vm_start() -> find_vma_links()`,`find_vma_links()`函数为新`vma`查找合适的插入的位置。函数路径：`linux-4.14.130/mm/mmap.c`，实现如下：

```c
static int find_vma_links(struct mm_struct *mm, unsigned long addr,
		unsigned long end, struct vm_area_struct **pprev,
		struct rb_node ***rb_link, struct rb_node **rb_parent)
{
	struct rb_node **__rb_link, *__rb_parent, *rb_prev;

	__rb_link = &mm->mm_rb.rb_node;
	rb_prev = __rb_parent = NULL;

	while (*__rb_link) {
		struct vm_area_struct *vma_tmp;

		__rb_parent = *__rb_link;
		vma_tmp = rb_entry(__rb_parent, struct vm_area_struct, vm_rb);

		if (vma_tmp->vm_end > addr) {
			/* Fail if an existing vma overlaps the area */
			if (vma_tmp->vm_start < end)
				return -ENOMEM;
			__rb_link = &__rb_parent->rb_left;
		} else {
			rb_prev = __rb_parent;
			__rb_link = &__rb_parent->rb_right;
		}
	}

	*pprev = NULL;
	if (rb_prev)
		*pprev = rb_entry(rb_prev, struct vm_area_struct, vm_rb);
	*rb_link = __rb_link;
	*rb_parent = __rb_parent;
	return 0;
}

```

- `__rb_link`指向红黑树的根节点。
- `while()`循环遍历这个红黑树来寻找合适的插入位置。如果`addr`小于某个节点`VMA`的结束地址，那么继续遍历当前节点`VMA`的左子树。如果要插入的`vma`恰好和现有的`VMA`有一小部分的重叠，那么返回错误码`-ENOMEM`。如果`addr`大于某个节点`VMA`的结束地址，那么继续遍历当前节点`VMA`的右子树。`while()`循环一直遍历下去，知道某个节点没有子节点为止。
- `rb_prev`指向待插入节点的前继节点，这里获取前继节点的结构体。
- `*rb_link`指向`__rb_parent->rb_right`或`__rb_parent->rb_left`指针本身的地址。
- `__rb_parent`指向找到的待插入节点的父节点。



- `insert_vm_start() -> vma_link()`，`vma_link()`函数将新`vma`加入到红黑树中。函数路径：`linux-4.14.130/mm/mmap.c`，实现如下：

```c
static void vma_link(struct mm_struct *mm, struct vm_area_struct *vma,
			struct vm_area_struct *prev, struct rb_node **rb_link,
			struct rb_node *rb_parent)
{
	struct address_space *mapping = NULL;

	if (vma->vm_file) {
		mapping = vma->vm_file->f_mapping;
		i_mmap_lock_write(mapping);
	}

	__vma_link(mm, vma, prev, rb_link, rb_parent);
	__vma_link_file(vma);

	if (mapping)
		i_mmap_unlock_write(mapping);

	mm->map_count++;
	validate_mm(mm);
}

```

- `vma_link()`通过`__vma_link()`函数将新`vma`添加到红黑树和链表中，`__vma_link_file()`函数把`vma`添加到文件的基数树(`Radix Tree`)上。`__vma_link()`函数路径：`linux-4.14.130/mm/mmap.c`，实现如下：

```c
static void
__vma_link(struct mm_struct *mm, struct vm_area_struct *vma,
	struct vm_area_struct *prev, struct rb_node **rb_link,
	struct rb_node *rb_parent)
{
	__vma_link_list(mm, vma, prev, rb_parent);
	__vma_link_rb(mm, vma, rb_link, rb_parent);
}

```

- `__vma_link()`函数调用`__vma_link_list()`，把`vma`添加到`mm -> mmap`链表中，`__vma_link_list()`函数路径：`kernel4.14/mm/util.c`，实现如下：

```c
void __vma_link_list(struct mm_struct *mm, struct vm_area_struct *vma,
		struct vm_area_struct *prev, struct rb_node *rb_parent)
{
	struct vm_area_struct *next;

	vma->vm_prev = prev;
	if (prev) {
		next = prev->vm_next;
		prev->vm_next = vma;
	} else {
		mm->mmap = vma;
		if (rb_parent)
			next = rb_entry(rb_parent,
					struct vm_area_struct, vm_rb);
		else
			next = NULL;
	}
	vma->vm_next = next;
	if (next)
		next->vm_prev = vma;
}

```

- `__vma_link()`函数调用`__vma_link_rb()`，把`vma`添加插入到红黑树中，`__vma_link_rb()`函数路径：`kernel4.14/mm/mmap.c`，实现如下：

```c
void __vma_link_rb(struct mm_struct *mm, struct vm_area_struct *vma,
		struct rb_node **rb_link, struct rb_node *rb_parent)
{
	/* Update tracking information for the gap following the new vma. */
	if (vma->vm_next)
		vma_gap_update(vma->vm_next);
	else
		mm->highest_vm_end = vm_end_gap(vma);

	/*
	 * vma->vm_prev wasn't known when we followed the rbtree to find the
	 * correct insertion point for that vma. As a result, we could not
	 * update the vma vm_rb parents rb_subtree_gap values on the way down.
	 * So, we first insert the vma with a zero rb_subtree_gap value
	 * (to be consistent with what we did on the way down), and then
	 * immediately update the gap to the correct value. Finally we
	 * rebalance the rbtree after all augmented values have been set.
	 */
	rb_link_node(&vma->vm_rb, rb_parent, rb_link);
	vma->rb_subtree_gap = 0;
	vma_gap_update(vma);
	vma_rb_insert(vma, &mm->mm_rb);
}

```

- `__vma_link_rb()`最终调用红黑树的`API`接口`rb_link_node()`和`__rb_insert()`(`vma_rb_insert() -> __rb_insert()`)函数来完成插入动作。`rb_link_node()`函数路径：`kernel4.14/include/linux/rbtree.h`，实现如下：

```c
static inline void rb_link_node(struct rb_node *node, struct rb_node *parent,
				struct rb_node **rb_link)
{
	node->__rb_parent_color = (unsigned long)parent;
	node->rb_left = node->rb_right = NULL;

	*rb_link = node;
}

```

之前提到`rb_link`指向要插入节点指针本身的地址，而`node`是新插入的节点，因此`*rb_link = node`就把`node`节点插入到红黑树中了。



## 3 合并`VMA`

- 在新的`VMA`被加入到进程的地址空间时，内核会检查它是否可以与一个或多个现存的`VMA`进行合并。`VMA`合并的首要条件就是检查新`VMA`的前继节点`prev`结束地址是否与新`VMA`起始地址重合，或新`VMA`的结束地址是否与其后继节点`next`起始地址重合；接着再检查将要合并的`VMA`是否有相同的标志。如果合并`VMA`均映射了磁盘文件，则还要检查其映射文件是否相同，以及文件内的偏移量是否连续。
- 上述提及的一系列条件检查均是在`vma_merge()`函数内完成，根据新`VMA`和它前后两个`VMA`之间的位置关系，`VMA`合并分为8种情况。`vma_merge()`函数定义路径：`kernel4.14/mm/mmap.c`，实现如下：

```c
/*
 * Given a mapping request (addr,end,vm_flags,file,pgoff,anon_name),
 * figure out whether that can be merged with its predecessor or its
 * successor.  Or both (it neatly fills a hole).
 *
 * In most cases - when called for mmap, brk or mremap - [addr,end) is
 * certain not to be mapped by the time vma_merge is called; but when
 * called for mprotect, it is certain to be already mapped (either at
 * an offset within prev, or at the start of next), and the flags of
 * this area are about to be changed to vm_flags - and the no-change
 * case has already been eliminated.
 *
 * The following mprotect cases have to be considered, where AAAA is
 * the area passed down from mprotect_fixup, never extending beyond one
 * vma, PPPPPP is the prev vma specified, and NNNNNN the next vma after:
 *
 *     AAAA             AAAA                AAAA          AAAA
 *    PPPPPPNNNNNN    PPPPPPNNNNNN    PPPPPPNNNNNN    PPPPNNNNXXXX
 *    cannot merge    might become    might become    might become
 *                    PPNNNNNNNNNN    PPPPPPPPPPNN    PPPPPPPPPPPP 6 or
 *    mmap, brk or    case 4 below    case 5 below    PPPPPPPPXXXX 7 or
 *    mremap move:                                    PPPPXXXXXXXX 8
 *        AAAA
 *    PPPP    NNNN    PPPPPPPPPPPP    PPPPPPPPNNNN    PPPPNNNNNNNN
 *    might become    case 1 below    case 2 below    case 3 below
 *
 * It is important for case 8 that the the vma NNNN overlapping the
 * region AAAA is never going to extended over XXXX. Instead XXXX must
 * be extended in region AAAA and NNNN must be removed. This way in
 * all cases where vma_merge succeeds, the moment vma_adjust drops the
 * rmap_locks, the properties of the merged vma will be already
 * correct for the whole merged range. Some of those properties like
 * vm_page_prot/vm_flags may be accessed by rmap_walks and they must
 * be correct for the whole merged range immediately after the
 * rmap_locks are released. Otherwise if XXXX would be removed and
 * NNNN would be extended over the XXXX range, remove_migration_ptes
 * or other rmap walkers (if working on addresses beyond the "end"
 * parameter) may establish ptes with the wrong permissions of NNNN
 * instead of the right permissions of XXXX.
 */
struct vm_area_struct *vma_merge(struct mm_struct *mm,
			struct vm_area_struct *prev, unsigned long addr,
			unsigned long end, unsigned long vm_flags,
			struct anon_vma *anon_vma, struct file *file,
			pgoff_t pgoff, struct mempolicy *policy,
			struct vm_userfaultfd_ctx vm_userfaultfd_ctx,
			const char __user *anon_name)
{
	pgoff_t pglen = (end - addr) >> PAGE_SHIFT;
	struct vm_area_struct *area, *next;
	int err;

	/*
	 * We later require that vma->vm_flags == vm_flags,
	 * so this tests vma->vm_flags & VM_SPECIAL, too.
	 */
	if (vm_flags & VM_SPECIAL)
		return NULL;

	if (prev)
		next = prev->vm_next;
	else
		next = mm->mmap;
	area = next;
	if (area && area->vm_end == end)		/* cases 6, 7, 8 */
		next = next->vm_next;

	/* verify some invariant that must be enforced by the caller */
	VM_WARN_ON(prev && addr <= prev->vm_start);
	VM_WARN_ON(area && end > area->vm_end);
	VM_WARN_ON(addr >= end);

	/*
	 * Can it merge with the predecessor?
	 */
	if (prev && prev->vm_end == addr &&
			mpol_equal(vma_policy(prev), policy) &&
			can_vma_merge_after(prev, vm_flags,
					    anon_vma, file, pgoff,
					    vm_userfaultfd_ctx,
					    anon_name)) {
		/*
		 * OK, it can.  Can we now merge in the successor as well?
		 */
		if (next && end == next->vm_start &&
				mpol_equal(policy, vma_policy(next)) &&
				can_vma_merge_before(next, vm_flags,
						     anon_vma, file,
						     pgoff+pglen,
						     vm_userfaultfd_ctx,
						     anon_name) &&
				is_mergeable_anon_vma(prev->anon_vma,
						      next->anon_vma, NULL)) {
							/* cases 1, 6 */
			err = __vma_adjust(prev, prev->vm_start,
					 next->vm_end, prev->vm_pgoff, NULL,
					 prev);
		} else					/* cases 2, 5, 7 */
			err = __vma_adjust(prev, prev->vm_start,
					 end, prev->vm_pgoff, NULL, prev);
		if (err)
			return NULL;
		khugepaged_enter_vma_merge(prev, vm_flags);
		return prev;
	}

	/*
	 * Can this new request be merged in front of next?
	 */
	if (next && end == next->vm_start &&
			mpol_equal(policy, vma_policy(next)) &&
			can_vma_merge_before(next, vm_flags,
					     anon_vma, file, pgoff+pglen,
					     vm_userfaultfd_ctx,
					     anon_name)) {
		if (prev && addr < prev->vm_end)	/* case 4 */
			err = __vma_adjust(prev, prev->vm_start,
					 addr, prev->vm_pgoff, NULL, next);
		else {					/* cases 3, 8 */
			err = __vma_adjust(area, addr, next->vm_end,
					 next->vm_pgoff - pglen, NULL, next);
			/*
			 * In case 3 area is already equal to next and
			 * this is a noop, but in case 8 "area" has
			 * been removed and next was expanded over it.
			 */
			area = next;
		}
		if (err)
			return NULL;
		khugepaged_enter_vma_merge(area, vm_flags);
		return area;
	}

	return NULL;
}

```



### 3.1 `vma_merge()`参数解析

- `vma_merge()`函数的参数很多，如下：

```c
struct vm_area_struct *vma_merge(struct mm_struct *mm,
			struct vm_area_struct *prev, unsigned long addr,
			unsigned long end, unsigned long vm_flags,
			struct anon_vma *anon_vma, struct file *file,
			pgoff_t pgoff, struct mempolicy *policy,
			struct vm_userfaultfd_ctx vm_userfaultfd_ctx,
			const char __user *anon_name)

```

> `mm`: 相关进程的`struct mm_struct`数据结构；
>
> `prev`: 是紧接着新`VMA`前继节点的`VMA`，一般通过`find_vma_links()`函数来获取；
>
> `addr`，`end`: 是新`VMA`的起始地址和结束地址；
>
> `vm_flags`： 是新`VMA`的标志位；
>
> `anon_vma`: 是匿名映射的`struct anon_vma`数据结构；
>
> `file`： 如果新`VMA`属于一个文件映射，则参数`file`指向该文件`struct file`数据结构；
>
> `pgoff`： 如果新`VMA`属于一个文件映射，则参数`pgoff`指定文件映射偏移量。



### 3.2 后继节点`next`

```c
pgoff_t pglen = (end - addr) >> PAGE_SHIFT;
struct vm_area_struct *area, *next;
int err;

/*
	 * We later require that vma->vm_flags == vm_flags,
	 * so this tests vma->vm_flags & VM_SPECIAL, too.
	 */
if (vm_flags & VM_SPECIAL)
    return NULL;

if (prev)
    next = prev->vm_next;
else
    next = mm->mmap;
area = next;
if (area && area->vm_end == end)		/* cases 6, 7, 8 */
    next = next->vm_next;

```

- `vma_merge()`函数首先通过起始地址和结束地址计算新`VMA`的长度，接下来判断新`VMA`是否设置了`VM_SPECIAL`，`VM_SPECIAL`指的是`non-mergeable`和`non-mlockable`的`VMAs`，主要是指包含（`VM_IO | VM_DONTEXPAND | VM_PFNMAP | VM_MIXEDMAP`）标志位的`VMAs`，这个标志指定了该区域不能和其他区域合并，因此立即返回NULL。
- 通过`prev`获得下一个`vma`的描述符`next`，如下图所示：                                             ![1572959958928](/home/haibin.xu/haibin/doc/picture/图14.2-vma_merge()示意图1.png) 
- 如果新的`vma`结束地址与`next`的结束地址重合，则`next`再向前移动一个区域，如图2。为了便于说明，在图2所示的情况下，`next‘`表示紧邻`prev`的那个区域，而`next`表示紧邻`next‘`的区域。图中每个不同的内存区域都使用不同的颜色标示。                                          ![1572960105224](/home/haibin.xu/haibin/doc/picture/图14.3-vma_merge()示意图2.png)                                            



### 3.3 合并

- 接下来开始真正的合并工作，合并分为两大类，第一大类为新`vma`的起始地址和`prev`区域的结束地址重合，第二种情况为新`vma`的结束地址和`next`区域的起始地址重合。我们首先分析第一种情况，即便`addr`和`prev`的结束地址重合还不足以将其合并，还应通过`can_vma_merge_after()`判断两者的标志和映射文件等是否相同。如果都满足条件，那么合并此时就应该可以开始了。不过合并函数力求每次合并程度达到最大化，它再继续检查`end`是否恰好与`next`区域的起始地址重合。
- 在这样的判断条件下，会出现5种不同的合并情况(分别为`case1，6，2，5，7`)。每种合并情况最终都会调用`vma_adjust（）`，它通过修改`vma`结构中的字段对区域进行适当调整，也就是说真正的合并是在这个函数中完成的。可以看出`vma_merge()`本质上是一个“分流”函数，它将区域合并细化，根据不同的合并情况向`vma_adjust()`传递不同的参数。

```c
	/*
	 * Can it merge with the predecessor?
	 */
	if (prev && prev->vm_end == addr &&
			mpol_equal(vma_policy(prev), policy) &&
			can_vma_merge_after(prev, vm_flags,
					    anon_vma, file, pgoff,
					    vm_userfaultfd_ctx,
					    anon_name)) {
		/*
		 * OK, it can.  Can we now merge in the successor as well?
		 */
		if (next && end == next->vm_start &&
				mpol_equal(policy, vma_policy(next)) &&
				can_vma_merge_before(next, vm_flags,
						     anon_vma, file,
						     pgoff+pglen,
						     vm_userfaultfd_ctx,
						     anon_name) &&
				is_mergeable_anon_vma(prev->anon_vma,
						      next->anon_vma, NULL)) {
							/* cases 1, 6 */
			err = __vma_adjust(prev, prev->vm_start,
					 next->vm_end, prev->vm_pgoff, NULL,
					 prev);
		} else					/* cases 2, 5, 7 */
			err = __vma_adjust(prev, prev->vm_start,
					 end, prev->vm_pgoff, NULL, prev);
		if (err)
			return NULL;
		khugepaged_enter_vma_merge(prev, vm_flags);
		return prev;
	}

```

- 从上面的分析以及源码可以看出，`case1`和`case6`既满足`addr`与`prev`终止地址重合，又满足`end`与`next`起始地址重合，但是他们的`next`却指向不同的区域。`case1`可参考下图，它实际上是填充了`prev`和`next`之间的“空洞”，也就是说三个区域合为一个区域，`vma_adjust()`会删除`next`区域同时扩大`prev`区域。![1573004169722](/home/haibin.xu/haibin/doc/picture/图14.4-vma_merge()示意图3.png)

- `case6`也可以看作是填充`prev`和`next`区域之间的空洞，不过它会将`next‘`区域进行“覆盖”。通过代码可以发现，`next‘`和`next`区域事实上是连续的，不过由于其他原因，比如标志不同，造成它们是两个不同的区域。尽管地址连续，但是组织的时候仍然通过链表链接。这里为了定量的表示区域之间的关系，省去了`next‘`和`next`之间的链接箭头。![1573004353084](/home/haibin.xu/haibin/doc/picture/图14.5-vma_merge()示意图4.png)

- 如果`end`与`next`的起始地址不重合，那么会出现`case2，case5，case7`三种情况。这三种情况的差异会在`vma_adjust()`中被进一步区分，而在当前函数中，它们被看作是一种情况，即`addr`与`prev`终止地址重合而`end`与`next`起始地址不重合。如果`end`小于`next`区域的起始地址，则为`case2`。   ![1573004533653](/home/haibin.xu/haibin/doc/picture/图14.6-vma_merge()示意图5.png)

  如果`end`大于`next`区域的起始地址，则为`case5`。在这种情况下，`next`会被一分为二，一部分加入`prev`，而另一部分则继续保留在原始区域中。![1573004683722](/home/haibin.xu/haibin/doc/picture/图14.7-vma_merge()示意图6.png)

  `case7`也是一种扩大`prev`的情况，它会将`next‘`覆盖，而`next`则保持不变。                            ![1573004797078](/home/haibin.xu/haibin/doc/picture/图14.8-vma_merge()示意图7.png)                                                           



- 当上述情况都不符合时，进入第二大类合并，即`end`与`next`的起始地址重合。在这种情形下涉及三种合并模型，它们的图示分别如下所示。

```c
	/*
	 * Can this new request be merged in front of next?
	 */
	if (next && end == next->vm_start &&
			mpol_equal(policy, vma_policy(next)) &&
			can_vma_merge_before(next, vm_flags,
					     anon_vma, file, pgoff+pglen,
					     vm_userfaultfd_ctx,
					     anon_name)) {
		if (prev && addr < prev->vm_end)	/* case 4 */
			err = __vma_adjust(prev, prev->vm_start,
					 addr, prev->vm_pgoff, NULL, next);
		else {					/* cases 3, 8 */
			err = __vma_adjust(area, addr, next->vm_end,
					 next->vm_pgoff - pglen, NULL, next);
			/*
			 * In case 3 area is already equal to next and
			 * this is a noop, but in case 8 "area" has
			 * been removed and next was expanded over it.
			 */
			area = next;
		}
		if (err)
			return NULL;
		khugepaged_enter_vma_merge(area, vm_flags);
		return area;
	}

```

- 如果`addr`大于`prev`的终止地址，则属于`case4`。这种情况下缩小`prev`，扩充`next`。                          ![1573005111270](/home/haibin.xu/haibin/doc/picture/图14.9-vma_merge()示意图8.png)

- 如果`addr`小于`prev`区域的终止地址，则属于`case3`。这种情况下`prev`不做改变，扩充`next`。                    ![1573005365804](/home/haibin.xu/haibin/doc/picture/图14.11-vma_merge()示意图10.png)                                  
- `case8`与`case3`比较类似，不过它会覆盖已存在的`next‘`。                                            ![1573005216280](/home/haibin.xu/haibin/doc/picture/图14.10-vma_merge()示意图9.png)